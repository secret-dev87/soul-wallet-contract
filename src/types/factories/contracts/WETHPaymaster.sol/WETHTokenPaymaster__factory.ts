/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WETHTokenPaymaster,
  WETHTokenPaymasterInterface,
} from "../../../contracts/WETHPaymaster.sol/WETHTokenPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract EntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_WETHToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "KnownWallets",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETHToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "extraUnstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "walletCodeHash",
        type: "bytes32",
      },
    ],
    name: "addWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "walletCodeHash",
        type: "bytes32",
      },
    ],
    name: "removeWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200136d3803806200136d83398101604081905262000034916200017f565b828280620000428162000079565b506200004e82620000c9565b5050600280546001600160a01b0319166001600160a01b039290921691909117905550620001d39050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000d3620000f5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b33620001096000546001600160a01b031690565b6001600160a01b031614620001645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6001600160a01b03811681146200017c57600080fd5b50565b6000806000606084860312156200019557600080fd5b8351620001a28162000166565b6020850151909350620001b58162000166565b6040850151909250620001c88162000166565b809150509250925092565b61118a80620001e36000396000f3fe6080604052600436106100d95760003560e01c80630396cb60146100de5780630ad1dee5146100f3578063205c2878146101135780634b2f336d146101335780634e0f4c6b1461016957806351cff8d914610189578063584465f2146101a9578063715018a6146101c95780638da5cb5b146101de57806397d06cec146101f3578063a9a2340914610233578063b0d691fe14610253578063bb9fe6bf14610273578063c23a5cea14610288578063c399ec88146102a8578063d0e30db0146102cb578063f2fde38b146102d3578063f465c77e146102f3575b600080fd5b6100f16100ec366004610da3565b610320565b005b3480156100ff57600080fd5b506100f161010e366004610dc7565b610408565b34801561011f57600080fd5b506100f161012e366004610df5565b61042b565b34801561013f57600080fd5b50600254610153906001600160a01b031681565b6040516101609190610e21565b60405180910390f35b34801561017557600080fd5b506100f1610184366004610dc7565b61047f565b34801561019557600080fd5b506100f16101a4366004610e35565b61049f565b3480156101b557600080fd5b506100f16101c4366004610e35565b6105a3565b3480156101d557600080fd5b506100f16105cd565b3480156101ea57600080fd5b506101536105e1565b3480156101ff57600080fd5b5061022361020e366004610dc7565b60036020526000908152604090205460ff1681565b6040519015158152602001610160565b34801561023f57600080fd5b506100f161024e366004610e52565b6105f0565b34801561025f57600080fd5b50600154610153906001600160a01b031681565b34801561027f57600080fd5b506100f161060a565b34801561029457600080fd5b506100f16102a3366004610e35565b610676565b3480156102b457600080fd5b506102bd6106e3565b604051908152602001610160565b6100f161075a565b3480156102df57600080fd5b506100f16102ee366004610e35565b6107a5565b3480156102ff57600080fd5b5061031361030e366004610ee0565b61081e565b6040516101609190610f33565b610328610a62565b60015460408051630721732f60e31b815290516001600160a01b0390921691630396cb609134918591859163390b99789160048082019260209290919082900301816000875af1158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610f81565b6103ae9190610fb4565b6040516001600160e01b031960e085901b16815263ffffffff9190911660048201526024016000604051808303818588803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b505050505050565b610410610a62565b6000908152600360205260409020805460ff19166001179055565b610433610a62565b60015460405163040b850f60e31b81526001600160a01b039091169063205c2878906104659085908590600401610fd8565b600060405180830381600087803b1580156103ec57600080fd5b610487610a62565b6000908152600360205260409020805460ff19169055565b6104a7610a62565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a08231906104d8903090600401610e21565b602060405180830381865afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105199190610ff1565b9050610529565b60405180910390fd5b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061055b9085908590600401610fd8565b6020604051808303816000875af115801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e919061100a565b505050565b6105ab610a62565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6105d5610a62565b6105df6000610ac1565b565b6000546001600160a01b031690565b6105f8610b11565b61060484848484610b28565b50505050565b610612610a62565b600160009054906101000a90046001600160a01b03166001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561066257600080fd5b505af1158015610604573d6000803e3d6000fd5b61067e610a62565b60015460405163611d2e7560e11b81526001600160a01b039091169063c23a5cea906106ae908490600401610e21565b600060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b5050505050565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610714903090600401610e21565b602060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107559190610ff1565b905090565b60015460405163b760faf960e01b81526001600160a01b039091169063b760faf990349061078c903090600401610e21565b6000604051808303818588803b1580156106c857600080fd5b6107ad610a62565b6001600160a01b0381166108125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610520565b61081b81610ac1565b50565b606061afc88460a00135116108895760405162461bcd60e51b815260206004820152602b60248201527f574554482d546f6b656e5061796d61737465723a2067617320746f6f206c6f7760448201526a020666f7220706f73744f760ac1b6064820152608401610520565b8335610898604086018661102c565b1590506108ad576108a885610bd0565b61096f565b600254604051636eb1769f60e11b81526001600160a01b0383811660048301523060248301528592169063dd62ed3e90604401602060405180830381865afa1580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190610ff1565b101561096f5760405162461bcd60e51b81526020600482015260296024820152600080516020611135833981519152604482015268616c6c6f77616e636560b81b6064820152608401610520565b6002546040516370a0823160e01b815284916001600160a01b0316906370a082319061099f908590600401610e21565b602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190610ff1565b1015610a2c5760405162461bcd60e51b8152602060048201526027602482015260008051602061113583398151915260448201526662616c616e636560c81b6064820152608401610520565b610a396020860186610e35565b604051602001610a499190610e21565b6040516020818303038152906040529150509392505050565b33610a6b6105e1565b6001600160a01b0316146105df5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610520565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546001600160a01b031633146105df57600080fd5b6000610b3683850185610e35565b6002549091506001600160a01b03166323b872dd8230610b58613a9887611079565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061100a565b6000610bdf604083018361102c565b6000906080610bf1604087018761102c565b610bfc929150611092565b92610c09939291906110a5565b604051610c179291906110cf565b604051809103902090506000828060400190610c33919061102c565b6080610c42604087018761102c565b610c4d929150611092565b610c589282906110a5565b610c61916110df565b6001549091506001600160a01b03808316911614610c915760405162461bcd60e51b8152600401610520906110fd565b6000610ca0604085018561102c565b6040610cae8782018861102c565b610cb9929150611092565b610cc49282906110a5565b610ccd916110df565b6002549091506001600160a01b03808316911614610d2a5760405162461bcd60e51b815260206004820152601a6024820152793bb937b733903a37b5b2b71034b71031b7b739ba393ab1ba37b960311b6044820152606401610520565b6000610d39604086018661102c565b6020610d48604089018961102c565b610d53929150611092565b610d5e9282906110a5565b610d67916110df565b90506001600160a01b03811630146106dc5760405162461bcd60e51b8152600401610520906110fd565b63ffffffff8116811461081b57600080fd5b600060208284031215610db557600080fd5b8135610dc081610d91565b9392505050565b600060208284031215610dd957600080fd5b5035919050565b6001600160a01b038116811461081b57600080fd5b60008060408385031215610e0857600080fd5b8235610e1381610de0565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600060208284031215610e4757600080fd5b8135610dc081610de0565b60008060008060608587031215610e6857600080fd5b843560038110610e7757600080fd5b935060208501356001600160401b0380821115610e9357600080fd5b818701915087601f830112610ea757600080fd5b813581811115610eb657600080fd5b886020828501011115610ec857600080fd5b95986020929092019750949560400135945092505050565b600080600060608486031215610ef557600080fd5b83356001600160401b03811115610f0b57600080fd5b84016101608187031215610f1e57600080fd5b95602085013595506040909401359392505050565b600060208083528351808285015260005b81811015610f6057858101830151858201604001528201610f44565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610f9357600080fd5b8151610dc081610d91565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115610fd157610fd1610f9e565b5092915050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561100357600080fd5b5051919050565b60006020828403121561101c57600080fd5b81518015158114610dc057600080fd5b6000808335601e1984360301811261104357600080fd5b8301803591506001600160401b0382111561105d57600080fd5b60200191503681900382131561107257600080fd5b9250929050565b8082018082111561108c5761108c610f9e565b92915050565b8181038181111561108c5761108c610f9e565b600080858511156110b557600080fd5b838611156110c257600080fd5b5050820193919092039150565b8183823760009101908152919050565b8035602083101561108c57600019602084900360031b1b1692915050565b6020808252601e908201527f77726f6e67207061796d617374657220696e20636f6e7374727563746f72000060408201526060019056fe574554482d546f6b656e5061796d61737465723a206e6f7420656e6f75676820a264697066735822122014fb1901cb5557cdcd5e9cd7c61e3df79fbe657538f2e161477211affd0da89564736f6c63430008110033";

type WETHTokenPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WETHTokenPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WETHTokenPaymaster__factory extends ContractFactory {
  constructor(...args: WETHTokenPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _WETHToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WETHTokenPaymaster> {
    return super.deploy(
      _entryPoint,
      _owner,
      _WETHToken,
      overrides || {}
    ) as Promise<WETHTokenPaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _WETHToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _entryPoint,
      _owner,
      _WETHToken,
      overrides || {}
    );
  }
  override attach(address: string): WETHTokenPaymaster {
    return super.attach(address) as WETHTokenPaymaster;
  }
  override connect(signer: Signer): WETHTokenPaymaster__factory {
    return super.connect(signer) as WETHTokenPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WETHTokenPaymasterInterface {
    return new utils.Interface(_abi) as WETHTokenPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WETHTokenPaymaster {
    return new Contract(address, _abi, signerOrProvider) as WETHTokenPaymaster;
  }
}
