/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../contracts/Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
    ],
    name: "testBytes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103d9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ca8b1a714610030575b600080fd5b61004361003e36600461025d565b610045565b005b6003600080808080805b86811015610195576041818102890160208101516040820151919092015160ff16955090935091506000849003610183579193508391610090876041610323565b8210156100cc5760405162461bcd60e51b8152602060048201526005602482015264475330323160d81b60448201526064015b60405180910390fd5b87516100d9836020610323565b111561010f5760405162461bcd60e51b815260206004820152600560248201526423a998191960d91b60448201526064016100c3565b6020828901810151895190918290610128908690610323565b6101329190610323565b11156101685760405162461bcd60e51b8152602060048201526005602482015264475330323360d81b60448201526064016100c3565b8883016020016101778161019f565b610180826101e5565b50505b8061018d8161033c565b91505061004f565b5050505050505050565b6101e2816040516024016101b39190610355565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b179052610226565b50565b6101e2816040516024016101fb91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561026f57600080fd5b81356001600160401b038082111561028657600080fd5b818401915084601f83011261029a57600080fd5b8135818111156102ac576102ac610247565b604051601f8201601f19908116603f011681019083821181831017156102d4576102d4610247565b816040528281528760208487010111156102ed57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103365761033661030d565b92915050565b60006001820161034e5761034e61030d565b5060010190565b600060208083528351808285015260005b8181101561038257858101830151858201604001528201610366565b506000604082860101526040601f19601f830116850101925050509291505056fea26469706673582212202fc611158d6dc300387c757d37a5c33d754c7fba75e22a57fb7d7b9380fa54ca64736f6c63430008110033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
