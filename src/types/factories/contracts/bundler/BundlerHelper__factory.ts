/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BundlerHelper,
  BundlerHelperInterface,
} from "../../../contracts/bundler/BundlerHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedPaymentGas",
        type: "uint256",
      },
      {
        internalType: "contract EntryPoint",
        name: "ep",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "ops",
        type: "tuple[]",
      },
      {
        internalType: "address payable",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "handleOps",
    outputs: [
      {
        internalType: "uint256",
        name: "paid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610729806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ecff7f9814610030575b600080fd5b61004361003e36600461028d565b61005c565b6040805192835260208301919091520160405180910390f35b60003a8161006a8289610349565b6040516307eb652360e21b81529091506001600160a01b03808616319190891690631fad948c906100a3908a908a908a906004016103e8565b600060405180830381600087803b1580156100bd57600080fd5b505af11580156100d1573d6000803e3d6000fd5b5050505080856001600160a01b0316316100eb9190610547565b935081841015610151576100fe8461015d565b6101078361015d565b6101108561015d565b6040516020016101229392919061057e565b60408051601f198184030181529082905262461bcd60e51b825261014891600401610613565b60405180910390fd5b50509550959350505050565b6060816000036101845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101ae578061019881610646565b91506101a79050600a83610675565b9150610188565b6000816001600160401b038111156101c8576101c8610689565b6040519080825280601f01601f1916602001820160405280156101f2576020820181803683370190505b509050815b851561025c57610208600a8761069f565b6102139060306106b3565b60f81b82610220836106c6565b92508281518110610233576102336106dd565b60200101906001600160f81b031916908160001a905350610255600a87610675565b95506101f7565b50949350505050565b6001600160a01b038116811461027a57600080fd5b50565b803561028881610265565b919050565b6000806000806000608086880312156102a557600080fd5b8535945060208601356102b781610265565b935060408601356001600160401b03808211156102d357600080fd5b818801915088601f8301126102e757600080fd5b8135818111156102f657600080fd5b8960208260051b850101111561030b57600080fd5b602083019550809450505050606086013561032581610265565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761036057610360610333565b92915050565b6001600160a01b03169052565b6000808335601e1984360301811261038a57600080fd5b83016020810192503590506001600160401b038111156103a957600080fd5b8036038213156103b857600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408082528181018490526000906060808401600587901b850182018885805b8a81101561052857888403605f190185528235368d900361015e1901811261042e578283fd5b8c01610160610445866104408461027d565b610366565b6020808301358188015261045b8a840184610373565b838c8a015261046d848a0182846103bf565b9350505061047d89840184610373565b8884038b8a015261048f8482846103bf565b608086810135908b015260a080870135908b015260c080870135908b015260e080870135908b015261010080870135908b0152935061012091506104d7905081850185610373565b898503838b01526104e98582846103bf565b94505050506101406104fd81850185610373565b9450888403828a01526105118486836103bf565b998301999850505094909401935050600101610408565b5050508094505050505061053f6020830184610366565b949350505050565b8181038181111561036057610360610333565b60005b8381101561057557818101518382015260200161055d565b50506000910152565b7703234b23713ba103830bc9032b737bab3b41d103830b4b2160451b8152600084516105b181601885016020890161055a565b6901032bc3832b1ba32b2160b51b60189184019182015284516105db81602284016020890161055a565b6901033b0b9a83934b1b2960b51b60229290910191820152835161060681602c84016020880161055a565b01602c0195945050505050565b602081526000825180602084015261063281604085016020870161055a565b601f01601f19169190910160400192915050565b60006001820161065857610658610333565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826106845761068461065f565b500490565b634e487b7160e01b600052604160045260246000fd5b6000826106ae576106ae61065f565b500690565b8082018082111561036057610360610333565b6000816106d5576106d5610333565b506000190190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fb2c972b3c3bdcf47df21ae3b4ec8d36c07920514eef059267e4b78b56d03b3a64736f6c63430008110033";

type BundlerHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BundlerHelper__factory extends ContractFactory {
  constructor(...args: BundlerHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BundlerHelper> {
    return super.deploy(overrides || {}) as Promise<BundlerHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BundlerHelper {
    return super.attach(address) as BundlerHelper;
  }
  override connect(signer: Signer): BundlerHelper__factory {
    return super.connect(signer) as BundlerHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerHelperInterface {
    return new utils.Interface(_abi) as BundlerHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BundlerHelper {
    return new Contract(address, _abi, signerOrProvider) as BundlerHelper;
  }
}
