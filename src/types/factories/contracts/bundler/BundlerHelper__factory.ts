/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BundlerHelper,
  BundlerHelperInterface,
} from "../../../contracts/bundler/BundlerHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedPaymentGas",
        type: "uint256",
      },
      {
        internalType: "contract EntryPoint",
        name: "ep",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "ops",
        type: "tuple[]",
      },
      {
        internalType: "address payable",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "handleOps",
    outputs: [
      {
        internalType: "uint256",
        name: "paid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610988806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ecff7f9814610030575b600080fd5b61004361003e366004610337565b61005c565b6040805192835260208301919091520160405180910390f35b60003a8161006a828961040d565b6040517f1fad948c00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff808616319190891690631fad948c906100c9908a908a908a906004016104fe565b600060405180830381600087803b1580156100e357600080fd5b505af11580156100f7573d6000803e3d6000fd5b50505050808573ffffffffffffffffffffffffffffffffffffffff163161011e91906106bf565b9350818410156101bc57610131846101c8565b61013a836101c8565b610143856101c8565b60405160200161015593929190610706565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526101b3916004016107c6565b60405180910390fd5b50509550959350505050565b60608161020857505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610232578061021c81610817565b915061022b9050600a8361087f565b915061020c565b60008167ffffffffffffffff81111561024d5761024d610893565b6040519080825280601f01601f191660200182016040528015610277576020820181803683370190505b509050815b85156102f95761028d600a876108c2565b6102989060306108d6565b60f81b826102a5836108ee565b925082815181106102b8576102b8610923565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506102f2600a8761087f565b955061027c565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461032457600080fd5b50565b803561033281610302565b919050565b60008060008060006080868803121561034f57600080fd5b85359450602086013561036181610302565b9350604086013567ffffffffffffffff8082111561037e57600080fd5b818801915088601f83011261039257600080fd5b8135818111156103a157600080fd5b8960208260051b85010111156103b657600080fd5b60208301955080945050505060608601356103d081610302565b809150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610445576104456103de565b500290565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261047f57600080fd5b830160208101925035905067ffffffffffffffff81111561049f57600080fd5b8036038313156104ae57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60408082528181018490526000906060808401600587901b850182018885805b8a81101561068d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa089850301855282357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea18d360301811261057e578283fd5b8c016101606105aa8661059084610327565b73ffffffffffffffffffffffffffffffffffffffff169052565b602080830135818801526105c08a84018461044a565b838c8a01526105d2848a0182846104b5565b935050506105e28984018461044a565b8884038b8a01526105f48482846104b5565b608086810135908b015260a080870135908b015260c080870135908b015260e080870135908b015261010080870135908b01529350610120915061063c90508185018561044a565b898503838b015261064e8582846104b5565b94505050506101406106628185018561044a565b9450888403828a01526106768486836104b5565b99830199985050509490940193505060010161051e565b50505073ffffffffffffffffffffffffffffffffffffffff8716602087015293506106b792505050565b949350505050565b6000828210156106d1576106d16103de565b500390565b60005b838110156106f15781810151838201526020016106d9565b83811115610700576000848401525b50505050565b7f6469646e27742070617920656e6f7567683a207061696420000000000000000081526000845161073e8160188501602089016106d6565b7f2065787065637465642000000000000000000000000000000000000000000000601891840191820152845161077b8160228401602089016106d6565b7f20676173507269636520000000000000000000000000000000000000000000006022929091019182015283516107b981602c8401602088016106d6565b01602c0195945050505050565b60208152600082518060208401526107e58160408501602087016106d6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610849576108496103de565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261088e5761088e610850565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000826108d1576108d1610850565b500690565b600082198211156108e9576108e96103de565b500190565b6000816108fd576108fd6103de565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220faad2216cd852488dcd962f86dd6a28c082fa79fb99a55e46a047ccdc1a0bc0e64736f6c634300080c0033";

type BundlerHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BundlerHelper__factory extends ContractFactory {
  constructor(...args: BundlerHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BundlerHelper> {
    return super.deploy(overrides || {}) as Promise<BundlerHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BundlerHelper {
    return super.attach(address) as BundlerHelper;
  }
  override connect(signer: Signer): BundlerHelper__factory {
    return super.connect(signer) as BundlerHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerHelperInterface {
    return new utils.Interface(_abi) as BundlerHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BundlerHelper {
    return new Contract(address, _abi, signerOrProvider) as BundlerHelper;
  }
}
