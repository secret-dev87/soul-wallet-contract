/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  VerifyingPaymaster,
  VerifyingPaymasterInterface,
} from "../../contracts/VerifyingPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifyingSigner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "extraUnstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifyingSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620012653803806200126583398101604081905262000034916200016a565b828180620000428162000064565b506200004e82620000b4565b5050506001600160a01b031660805250620001be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000be620000e0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b33620000f46000546001600160a01b031690565b6001600160a01b0316146200014f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6001600160a01b03811681146200016757600080fd5b50565b6000806000606084860312156200018057600080fd5b83516200018d8162000151565b6020850151909350620001a08162000151565b6040850151909250620001b38162000151565b809150509250925092565b608051611084620001e160003960008181610104015261083c01526110846000f3fe6080604052600436106100b85760003560e01c80630396cb60146100bd578063205c2878146100d257806323d9ac9b146100f2578063584465f21461013c578063715018a61461015c5780638da5cb5b14610171578063a9a2340914610186578063b0d691fe146101a6578063bb9fe6bf146101c6578063c23a5cea146101db578063c266f292146101fb578063c399ec8814610229578063d0e30db01461023e578063f2fde38b14610246578063f465c77e14610266575b600080fd5b6100d06100cb366004610d21565b610293565b005b3480156100de57600080fd5b506100d06100ed366004610d5a565b61037b565b3480156100fe57600080fd5b506101267f000000000000000000000000000000000000000000000000000000000000000081565b6040516101339190610d86565b60405180910390f35b34801561014857600080fd5b506100d0610157366004610d9a565b6103d1565b34801561016857600080fd5b506100d06103fb565b34801561017d57600080fd5b5061012661040f565b34801561019257600080fd5b506100d06101a1366004610db7565b61041e565b3480156101b257600080fd5b50600154610126906001600160a01b031681565b3480156101d257600080fd5b506100d0610438565b3480156101e757600080fd5b506100d06101f6366004610d9a565b6104a4565b34801561020757600080fd5b5061021b610216366004610e5e565b610511565b604051908152602001610133565b34801561023557600080fd5b5061021b6105e4565b6100d061065b565b34801561025257600080fd5b506100d0610261366004610d9a565b6106a6565b34801561027257600080fd5b50610286610281366004610e9a565b610724565b6040516101339190610ee7565b61029b6108d8565b60015460408051630721732f60e31b815290516001600160a01b0390921691630396cb609134918591859163390b99789160048082019260209290919082900301816000875af11580156102f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103179190610f35565b6103219190610f68565b6040516001600160e01b031960e085901b16815263ffffffff9190911660048201526024016000604051808303818588803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b505050505050565b6103836108d8565b60015460405163040b850f60e31b81526001600160a01b038481166004830152602482018490529091169063205c287890604401600060405180830381600087803b15801561035f57600080fd5b6103d96108d8565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6104036108d8565b61040d6000610937565b565b6000546001600160a01b031690565b610426610987565b6104328484848461099e565b50505050565b6104406108d8565b600160009054906101000a90046001600160a01b03166001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561049057600080fd5b505af1158015610432573d6000803e3d6000fd5b6104ac6108d8565b60015460405163611d2e7560e11b81526001600160a01b039091169063c23a5cea906104dc908490600401610d86565b600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b5050505050565b6000813560208301356105276040850185610f8c565b604051610535929190610fd2565b60405190819003902061054b6060860186610f8c565b604051610559929190610fd2565b604080519182900382206001600160a01b03909516602083015281019290925260608201526080808201929092529083013560a08083019190915283013560c08083019190915283013560e08083019190915283013561010080830191909152830135610120820152610140015b604051602081830303815290604052805190602001209050919050565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610615903090600401610d86565b602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610fe2565b905090565b60015460405163b760faf960e01b81526001600160a01b039091169063b760faf990349061068d903090600401610d86565b6000604051808303818588803b1580156104f657600080fd5b6106ae6108d8565b6001600160a01b0381166107185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61072181610937565b50565b6060600061073185610511565b9050366000610744610120880188610f8c565b90925090506000610756601483610ffb565b905080604014806107675750806041145b6107db576040805162461bcd60e51b81526020600482015260248101919091527f566572696679696e675061796d61737465723a20696e76616c6964207369676e60448201527f6174757265206c656e67746820696e207061796d6173746572416e6444617461606482015260840161070f565b6108316107eb836014818761100e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061082b92508891506109d69050565b90610a10565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108bd5760405162461bcd60e51b815260206004820152602360248201527f566572696679696e675061796d61737465723a2077726f6e67207369676e617460448201526275726560e81b606482015260840161070f565b50506040805160208101909152600081529695505050505050565b336108e161040f565b6001600160a01b03161461040d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161070f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546001600160a01b0316331461040d57600080fd5b60405162461bcd60e51b815260206004820152600d60248201526c6d757374206f7665727269646560981b604482015260640161070f565b6040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c8101829052600090605c016105c7565b6000806000610a1f8585610a36565b91509150610a2c81610a7b565b5090505b92915050565b6000808251604103610a6c5760208301516040840151606085015160001a610a6087828585610c2c565b94509450505050610a74565b506000905060025b9250929050565b6000816004811115610a8f57610a8f611038565b03610a975750565b6001816004811115610aab57610aab611038565b03610af35760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161070f565b6002816004811115610b0757610b07611038565b03610b545760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161070f565b6003816004811115610b6857610b68611038565b03610bc05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161070f565b6004816004811115610bd457610bd4611038565b036107215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161070f565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610c595750600090506003610d06565b8460ff16601b14158015610c7157508460ff16601c14155b15610c825750600090506004610d06565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610cd6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cff57600060019250925050610d06565b9150600090505b94509492505050565b63ffffffff8116811461072157600080fd5b600060208284031215610d3357600080fd5b8135610d3e81610d0f565b9392505050565b6001600160a01b038116811461072157600080fd5b60008060408385031215610d6d57600080fd5b8235610d7881610d45565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600060208284031215610dac57600080fd5b8135610d3e81610d45565b60008060008060608587031215610dcd57600080fd5b843560038110610ddc57600080fd5b935060208501356001600160401b0380821115610df857600080fd5b818701915087601f830112610e0c57600080fd5b813581811115610e1b57600080fd5b886020828501011115610e2d57600080fd5b95986020929092019750949560400135945092505050565b60006101608284031215610e5857600080fd5b50919050565b600060208284031215610e7057600080fd5b81356001600160401b03811115610e8657600080fd5b610e9284828501610e45565b949350505050565b600080600060608486031215610eaf57600080fd5b83356001600160401b03811115610ec557600080fd5b610ed186828701610e45565b9660208601359650604090950135949350505050565b600060208083528351808285015260005b81811015610f1457858101830151858201604001528201610ef8565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610f4757600080fd5b8151610d3e81610d0f565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115610f8557610f85610f52565b5092915050565b6000808335601e19843603018112610fa357600080fd5b8301803591506001600160401b03821115610fbd57600080fd5b602001915036819003821315610a7457600080fd5b8183823760009101908152919050565b600060208284031215610ff457600080fd5b5051919050565b81810381811115610a3057610a30610f52565b6000808585111561101e57600080fd5b8386111561102b57600080fd5b5050820193919092039150565b634e487b7160e01b600052602160045260246000fdfea26469706673582212208d944453336dbbd466b9f5c70472aee2a922cff8ba4f17212388bbd62f2cb0f464736f6c63430008110033";

type VerifyingPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyingPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifyingPaymaster__factory extends ContractFactory {
  constructor(...args: VerifyingPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    _verifyingSigner: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VerifyingPaymaster> {
    return super.deploy(
      _entryPoint,
      _verifyingSigner,
      _owner,
      overrides || {}
    ) as Promise<VerifyingPaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    _verifyingSigner: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _entryPoint,
      _verifyingSigner,
      _owner,
      overrides || {}
    );
  }
  override attach(address: string): VerifyingPaymaster {
    return super.attach(address) as VerifyingPaymaster;
  }
  override connect(signer: Signer): VerifyingPaymaster__factory {
    return super.connect(signer) as VerifyingPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyingPaymasterInterface {
    return new utils.Interface(_abi) as VerifyingPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifyingPaymaster {
    return new Contract(address, _abi, signerOrProvider) as VerifyingPaymaster;
  }
}
