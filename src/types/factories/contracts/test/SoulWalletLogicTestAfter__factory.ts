/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SoulWalletLogicTestAfter,
  SoulWalletLogicTestAfterInterface,
} from "../../../contracts/test/SoulWalletLogicTestAfter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getLogicInfo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "setAllowedUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105a1806100206000396000f3fe6080604052600436106100555760003560e01c80632fa4ae7f1461005a5780633659cfe6146100aa5780634f1ef286146100bf5780637d969a70146100d25780638da5cb5b146100f2578063c4d66de81461012f575b600080fd5b34801561006657600080fd5b50604080518082018252601881527729b7bab62bb0b63632ba2637b3b4b1aa32b9ba20b33a32b960411b602082015290516100a191906103d8565b60405180910390f35b6100bd6100b8366004610442565b61014f565b005b6100bd6100cd36600461047a565b610164565b3480156100de57600080fd5b506100bd6100ed366004610442565b61017b565b3480156100fe57600080fd5b506000546101179061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b34801561013b57600080fd5b506100bd61014a366004610442565b610214565b6101588161028e565b61016181610326565b50565b61016d8261028e565b6101778282610363565b5050565b60005461010090046001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b60448201526064015b60405180910390fd5b6001600160a01b0381166101f25760405162461bcd60e51b81526004016101c39061053b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60005460ff161561025d5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016101c3565b6000805460ff196001600160a01b0390931661010002929092166001600160a81b0319909216919091176001179055565b60005461010090046001600160a01b031633146102e65760405162461bcd60e51b81526020600482015260166024820152756f6e6c79206f776e65722063616e207570677261646560501b60448201526064016101c3565b6001546001600160a01b038281169116146103135760405162461bcd60e51b81526004016101c39061053b565b50600180546001600160a01b0319169055565b61032f8161037d565b6001600160a01b038116807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a25050565b61036c82610326565b8051156101775761017782826103ac565b803b61038857600080fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b813b6103b757600080fd5b600080825160208401855af4806103d3573d806000803e806000fd5b505050565b600060208083528351808285015260005b81811015610405578581018301518582016040015282016103e9565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461043d57600080fd5b919050565b60006020828403121561045457600080fd5b61045d82610426565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561048d57600080fd5b61049683610426565b915060208301356001600160401b03808211156104b257600080fd5b818501915085601f8301126104c657600080fd5b8135818111156104d8576104d8610464565b604051601f8201601f19908116603f0116810190838211818310171561050057610500610464565b8160405282815288602084870101111561051957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60208082526016908201527534b73b30b634b21034b6b83632b6b2b73a30ba34b7b760511b60408201526060019056fea2646970667358221220f695710b112d18673198e7d2c3848c78f6fddf59aa31f25ca77c50d0d8b6376c64736f6c63430008110033";

type SoulWalletLogicTestAfterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SoulWalletLogicTestAfterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SoulWalletLogicTestAfter__factory extends ContractFactory {
  constructor(...args: SoulWalletLogicTestAfterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SoulWalletLogicTestAfter> {
    return super.deploy(overrides || {}) as Promise<SoulWalletLogicTestAfter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SoulWalletLogicTestAfter {
    return super.attach(address) as SoulWalletLogicTestAfter;
  }
  override connect(signer: Signer): SoulWalletLogicTestAfter__factory {
    return super.connect(signer) as SoulWalletLogicTestAfter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SoulWalletLogicTestAfterInterface {
    return new utils.Interface(_abi) as SoulWalletLogicTestAfterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SoulWalletLogicTestAfter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SoulWalletLogicTestAfter;
  }
}
