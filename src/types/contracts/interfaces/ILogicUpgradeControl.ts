/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ILogicUpgradeControlInterface extends utils.Interface {
  functions: {};

  events: {
    "PreUpgrade(address,uint64)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PreUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface PreUpgradeEventObject {
  newLogic: string;
  activateTime: BigNumber;
}
export type PreUpgradeEvent = TypedEvent<
  [string, BigNumber],
  PreUpgradeEventObject
>;

export type PreUpgradeEventFilter = TypedEventFilter<PreUpgradeEvent>;

export interface UpgradedEventObject {
  newImplementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ILogicUpgradeControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILogicUpgradeControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "PreUpgrade(address,uint64)"(
      newLogic?: null,
      activateTime?: null
    ): PreUpgradeEventFilter;
    PreUpgrade(newLogic?: null, activateTime?: null): PreUpgradeEventFilter;

    "Upgraded(address)"(newImplementation?: null): UpgradedEventFilter;
    Upgraded(newImplementation?: null): UpgradedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
